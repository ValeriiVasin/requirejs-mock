{
    "extends": "eslint:recommended",
    "env": {
        "es6": true,
        "amd": true,
        "node": true,
        "jasmine": true,
        "browser": true
    },
    "globals": {
        "_": false,
    },
    // 0 - allowed
    // 1 - warning
    // 2 - error
    "rules": {
        // Disallow declaration of variables already declared in the outer scope
        "no-shadow": 0,
        // Disallow use of new operator when not part of the assignment or comparison
        "no-new": 0,
        // Allow dangling underscores in identifiers
        "no-underscore-dangle": 0,
        // Disallow use of multiple spaces
        "no-multi-spaces": 0,
        // Require return statements to either always or never specify values
        "consistent-return": 0,
        "curly": 2,
        // Disallow Primitive wrapper instances
        "no-new-wrappers": 2,
        // Disallow the use of the Object constructor
        "no-new-object": 2,
        // Disallow Function constructor
        "no-new-func": 2,
        // Disallow reassignment of native Objects
        "no-native-reassign": 2,
        // Disallow extending of native Objects
        "no-extend-native": 2,
        // Disallow functions in loops
        "no-loop-func": 2,
        // Disallow unnecessary nested blocks
        "no-lone-blocks": 2,
        // No constant expressions inside conditions
        "no-constant-condition": 2,
        "no-eval": 2,
        "no-implied-eval": 2,
        // Disallow unnecessary function binding
        "no-extra-bind": 2,
        // Disallow the use of `arguments.caller` and `arguments.callee`
        "no-caller": 2,

        // one declaration for uninitialized variables, one declaration PER initializer variable
        "one-var": [2, {
            "uninitialized": "always",
            "initialized": "never"
        }],

        // Disallow use of variables before they are defined
        // except named function definitions
        "no-use-before-define": [2, "nofunc"],
        // No with Statements
        "no-with": 2,
        // Enforce semi-colons
        "semi": [2, "always"],
        "no-multiple-empty-lines": 2,
        // Enforce single quotes
        "quotes": [2, "single"],
        // Enforce type-safe equality operators `===` and `!==`
        "eqeqeq": [2, "allow-null"],
        // Require immediate function invocation to be wrapped in parentheses
        "wrap-iife":  [2, "inside"],
        // Encourages use of dot notation whenever possible
        "dot-notation": [2, { "allowKeywords": false }],
        // Disallow declaration of variables that are not used in the code
        "no-unused-vars": 2,
        // Prefer the array literal notation [] to construct arrays
        "no-array-constructor": 2,
        // Disallow Use of the Comma Operator
        "no-sequences": 2,
        // Ensures that all function bodies are strict mode code, while global code is not
        "strict": [2, "global"],
        // Require file to end with single newline
        "eol-last": 2,
        "no-unused-expressions": 2,
        // Disallow initializing to undefined
        "no-undef-init": 2,
        // Disallow spaces in function calls
        "no-spaced-func": 2,
        "no-shadow-restricted-names": 2,
        // Disallow 'javascript:' URLs
        "no-script-url": 2,
        // Disallow assignment in return statement
        "no-return-assign": [2, "always"],

        //
        // Stylistic rules

        // Require camelcasing when naming variables
        "camelcase": 2,
        // Disallow Yoda conditions
        "yoda": [2, "never"],
        // Enforce one true comma style: before line break
        "comma-style": [2, "last"],
        // Enforce spacing after commas
        "comma-spacing": [2, { "before": false, "after": true }],
        // No spacing before semicolons, enforce space after semicolon
        "semi-spacing": [2, { "before": false, "after": true }],
        // Enforces spacing after the colon in object literal properties, and no spacing before
        "key-spacing": [2, { "beforeColon": false, "afterColon": true }],
        // Require spaces around infix operators
        "space-infix-ops": 2,
        // Require spaces following return, throw, and case
        "space-return-throw-case": 2,
        // Disallow quotes around object literal property names, except when they are strictly required
        "quote-props": [2, "as-needed"],
        // Enforce spaces inside of curly braces in objects
        "object-curly-spacing": [2, "always"],
        // Only allow LF (UNIX-style) linebreaks
        "linebreak-style": [2, "unix"],
        "no-trailing-spaces": 2,
        // Require consistent naming `that` when declaring an alias for `this`
        "consistent-this": [2, "that"],
        // Enforces "one true brace style"
        "brace-style": [2, "1tbs"],
        // require a space after certain keywords (if, else, for, while, do, switch, try, catch, finally, and with)
        "space-after-keywords": [2, "always"],
        // Disallow spaces between the function name or function keyword and the opening parenthesis
        "space-before-function-paren": [2, "never"],
        // Disallow spaces inside parentheses
        "space-in-parens": 2,
        // Require space before blocks
        "space-before-blocks": 2,
        // 4 spaces indentation
        "indent": [2, 2, { "SwitchCase": 1 }],
        // Require spaces before/after word unary operators (e.g. typeof), forbid for non-words (e.g. ++foo)
        "space-unary-ops": [2, { "words": true, "nonwords": false }],
        // Require parens when invoking a constructor
        "new-parens": 2,
        // Require a capital letter for constructors
        "new-cap": [2, {
            "capIsNewExceptions": [
                "Object",
                "Function",
                "Number",
                "String",
                "Boolean",
                "Date",
                "Array",
                "Symbol",
                "RegExp",

                // $.Deferred
                "Deferred",

                // $.Event
                "Event"
            ]
        }]
    }
}
